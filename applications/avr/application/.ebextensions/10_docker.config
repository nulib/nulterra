files:
  "/usr/sbin/docker-exec":
    owner: root
    group: root
    mode: "000755"
    content: |
      #!/bin/bash

      if [[ ! -f /var/app/current/Dockerrun.aws.json ]]; then
        echo "Dockerrun.aws.json not found. Using first container."
        container=$(docker ps -q | head -1)
        image=$(docker inspect ${container} | jq -r ".[].Config.Image")
      else
        image=$(cat /var/app/current/Dockerrun.aws.json | jq -r '.containerDefinitions[0].image')
        container=$(docker ps -q -f "ancestor=${image}")
      fi

      cmd=${1:-/bin/bash}

      RED="\033[31;1m" BLUE="\033[34;1m" NC="\033[0m"
      >&2 echo -e "${NC}Executing ${BLUE}${cmd}${NC} in container ${BLUE}${container}${NC} (${BLUE}${image}${NC})${NC}"
      docker exec -ti ${container} ${cmd}
  "/usr/sbin/docker-trim":
    owner: root
    group: root
    mode: "000755"
    content: |
      #!/bin/bash

      for cid in $(docker ps -q)
      do 
        pid=$(docker inspect -f '{{ .State.Pid }}' ${cid})
        fstrim /proc/${pid}/root
      done
  "/etc/cron.d/docker-trim":
    mode: "000644"
    owner: root
    group: root
    content: |
      0 */3 * * * /usr/sbin/docker-trim      
commands:
  00_grant_docker_access:
    command: "usermod -a -G docker ec2-user"
  01_clear_root_crontab:
    test: "/usr/bin/crontab -l"
    command: "/usr/bin/crontab -r"
